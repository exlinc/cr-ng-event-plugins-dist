import { Injectable } from '@angular/core';
import { concat, defer, EMPTY } from 'rxjs';
import { takeWhile } from 'rxjs/operators';
import { dasharize } from '../utils/dasharize';
import { AbstractEventPlugin } from './abstract.plugin';
export class BindEventPlugin extends AbstractEventPlugin {
    constructor() {
        super(...arguments);
        this.modifier = '$';
    }
    addEventListener(element, event) {
        var _a;
        element[event] = (_a = element[event]) !== null && _a !== void 0 ? _a : EMPTY;
        const method = this.getMethod(element, event);
        const zone$ = this.manager.getZone().onStable;
        const sub = concat(zone$.pipe(takeWhile(() => element[event] === EMPTY)), defer(() => element[event])).subscribe(method);
        return () => sub.unsubscribe();
    }
    getMethod(element, event) {
        const [, key, value, unit = ''] = event.split('.');
        if (event.endsWith('.attr')) {
            return v => v === null
                ? element.removeAttribute(key)
                : element.setAttribute(key, String(v));
        }
        if (key === 'class') {
            return v => element.classList.toggle(value, !!v);
        }
        if (key === 'style') {
            return v => element.style.setProperty(dasharize(value), `${v}${unit}`);
        }
        return v => (element[key] = v);
    }
}
/** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
BindEventPlugin.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZC5wbHVnaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1ldmVudC1wbHVnaW5zL3NyYy9wbHVnaW5zL2JpbmQucGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDN0MsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFHdEQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsbUJBQW1CO0lBRHhEOztRQUV1QixhQUFRLEdBQUcsR0FBRyxDQUFDO0lBeUN0QyxDQUFDO0lBdkNHLGdCQUFnQixDQUNaLE9BQTBELEVBQzFELEtBQWE7O1FBRWIsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxtQ0FBSSxLQUFLLENBQUM7UUFFekMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDOUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7UUFDOUMsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUNkLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUNyRCxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQzlCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXBCLE9BQU8sR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFTyxTQUFTLENBQ2IsT0FBOEMsRUFDOUMsS0FBYTtRQUViLE1BQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbkQsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FDUCxDQUFDLEtBQUssSUFBSTtnQkFDTixDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUM7Z0JBQzlCLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNsRDtRQUVELElBQUksR0FBRyxLQUFLLE9BQU8sRUFBRTtZQUNqQixPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUVELElBQUksR0FBRyxLQUFLLE9BQU8sRUFBRTtZQUNqQixPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUM7U0FDMUU7UUFFRCxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7OztZQTFDSixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Y29uY2F0LCBkZWZlciwgRU1QVFksIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHt0YWtlV2hpbGV9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7ZGFzaGFyaXplfSBmcm9tICcuLi91dGlscy9kYXNoYXJpemUnO1xuaW1wb3J0IHtBYnN0cmFjdEV2ZW50UGx1Z2lufSBmcm9tICcuL2Fic3RyYWN0LnBsdWdpbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCaW5kRXZlbnRQbHVnaW4gZXh0ZW5kcyBBYnN0cmFjdEV2ZW50UGx1Z2luIHtcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgbW9kaWZpZXIgPSAnJCc7XG5cbiAgICBhZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCAmIFJlY29yZDxzdHJpbmcsIE9ic2VydmFibGU8dW5rbm93bj4+LFxuICAgICAgICBldmVudDogc3RyaW5nLFxuICAgICk6IEZ1bmN0aW9uIHtcbiAgICAgICAgZWxlbWVudFtldmVudF0gPSBlbGVtZW50W2V2ZW50XSA/PyBFTVBUWTtcblxuICAgICAgICBjb25zdCBtZXRob2QgPSB0aGlzLmdldE1ldGhvZChlbGVtZW50LCBldmVudCk7XG4gICAgICAgIGNvbnN0IHpvbmUkID0gdGhpcy5tYW5hZ2VyLmdldFpvbmUoKS5vblN0YWJsZTtcbiAgICAgICAgY29uc3Qgc3ViID0gY29uY2F0KFxuICAgICAgICAgICAgem9uZSQucGlwZSh0YWtlV2hpbGUoKCkgPT4gZWxlbWVudFtldmVudF0gPT09IEVNUFRZKSksXG4gICAgICAgICAgICBkZWZlcigoKSA9PiBlbGVtZW50W2V2ZW50XSksXG4gICAgICAgICkuc3Vic2NyaWJlKG1ldGhvZCk7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHN1Yi51bnN1YnNjcmliZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0TWV0aG9kKFxuICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCAmIFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuICAgICAgICBldmVudDogc3RyaW5nLFxuICAgICk6ICh2OiB1bmtub3duKSA9PiB2b2lkIHtcbiAgICAgICAgY29uc3QgWywga2V5LCB2YWx1ZSwgdW5pdCA9ICcnXSA9IGV2ZW50LnNwbGl0KCcuJyk7XG5cbiAgICAgICAgaWYgKGV2ZW50LmVuZHNXaXRoKCcuYXR0cicpKSB7XG4gICAgICAgICAgICByZXR1cm4gdiA9PlxuICAgICAgICAgICAgICAgIHYgPT09IG51bGxcbiAgICAgICAgICAgICAgICAgICAgPyBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpXG4gICAgICAgICAgICAgICAgICAgIDogZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCBTdHJpbmcodikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJykge1xuICAgICAgICAgICAgcmV0dXJuIHYgPT4gZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKHZhbHVlLCAhIXYpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgcmV0dXJuIHYgPT4gZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShkYXNoYXJpemUodmFsdWUpLCBgJHt2fSR7dW5pdH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2ID0+IChlbGVtZW50W2tleV0gPSB2KTtcbiAgICB9XG59XG4iXX0=